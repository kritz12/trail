//***************************************************************************************************
// _mixins.scss
//
// 1. Color
// 2. Icons
// 3. Size
// 4. Space
// 5. Style
// 6. Typography
// **************************************************************************************************
// Naming convention notes:
// Mixins that generate scale classes for parent components
// .m-{name}-all-{categories}() {...}
// **************************************************************************************************

//***************************************************************************************************
// 1. Color
// **************************************************************************************************

/// Adds the standard text variant colors (contrast/accent etc.) to text components
///
/// @group Color
@mixin m-color-all-text-variants() {
	@each $variant in $m-text-variants {
		@if $variant != 'text' {
			&.is-#{$variant} {
				color: var(--color-text-#{$variant});
			}
		} @else {
			color: var(--color-text);
		}
	}
}

/// Adds all of the status color modifiers to text components
///
/// @group Color
@mixin m-color-all-text-statuses() {
	@each $color in $m-color-all-text-statuses {
		&.is-#{$color} {
			color: var(--color-text-#{$color});
		}
	}
}

/// Allows the ability to style dark-mode specific tokens
/// Use inside of component sass files
///
/// @group Color
@mixin m-color-tokens-dark {
	@media (prefers-color-scheme: dark) {
		:root {
			@content;
		}
	}
	:where([data-color-scheme='dark']) {
		@content;
	}
	@error 'Metal now only supports dark mode by default. This mixin is deprecated';
}

//***************************************************************************************************
// 2. Icons
// **************************************************************************************************

/// Generates all the icons sizes
///
/// @group Icons
/// @require $m-icon-sizes
///
/// @output List of `&.is-size-#{size} classes`
@mixin m-icon-all-sizes() {
	@each $size in $m-icon-sizes {
		&.is-size-#{$size} {
			width: var(--size-icon-#{$size});
			height: var(--size-icon-#{$size});

			svg {
				// TODO: @jgibson - Add scaled stroke widths
				// stroke-width: 1px;
			}
		}
	}
}

//***************************************************************************************************
// 3. Size
// **************************************************************************************************

/// Creates a mixin for mobile-specific styling
///
/// @group Size
@mixin m-bp-mobile {
	@media (max-width: 768px) {
		@content;
	}
}

//***************************************************************************************************
// 4. Space
// **************************************************************************************************

/// Generates all the modifier classes from the spacing scale
/// To be used in components specifically
///
/// @group Space
@mixin m-space-all-spaces {
	@each $space in $m-spaces {
		&.has-space-#{$space} {
			padding: var(--space-#{$space});
		}
	}
}

//***************************************************************************************************
// 5. Style
// **************************************************************************************************

/// Black/Inverse Surface Style
/// Useful for surface backgrounds, cards and more
///
/// @group Style
@mixin m-style-surface-black() {
	background-color: var(--color-surface-foundry-black);
	color: var(--color-text-on-foundry-black);
}

@mixin m-style-surface-default() {
	background: var(--color-surface);
	box-shadow: var(--shadow-box-default);
}

/// Sets the default link styles for text components
///
/// @group Style
@mixin m-style-link-default() {
	a {
		text-decoration: none;
		color: var(--color-text-link);
	}
	a:hover {
		text-decoration: underline;
		text-decoration-style: solid;
		text-decoration-thickness: 1px;
		text-underline-offset: calc(0.025em + 2px);
		text-decoration-color: var(--accent-6);
	}
}

/// Sets the default form input styling
/// Used in inputs, textareas and other text entry fields
///
/// @group Style
@mixin m-style-control() {
	// Reset
	all: unset;
	box-sizing: border-box;

	// Display
	width: 100%;
	display: inline-flex;
	align-items: center;
	justify-content: center;

	// Type
	line-height: 1;
	@include m-font-style(text);
	@include m-font-size(s, trim);

	// Transition
	// TODO: @jgibson â€“ Re-setup transition/animation tokens
	// transition: 150ms all ease-in-out;

	// Style
	color: var(--neutral-12);
	background-color: var(--color-surface);
	border: 1px solid var(--color-border);
	padding-inline: var(--space-control-inline);
	border-radius: var(--radius-default);

	// States
	&:hover {
		background-color: var(--black-a1);
		border-color: var(--neutral-7);
	}
	&:focus,
	&.is-focused {
		outline-style: solid;
		outline-color: transparent;
		box-shadow: var(--accent-7) 0 0 0 2px;
		border-color: var(--accent-7);
	}
	&[disabled] {
		cursor: text;
		color: var(--neutral-a11);
		background-color: var(--neutral-3);
		border-color: var(--neutral-6);
	}

	&.is-success {
		border-color: var(--color-border-success);
		&:focus,
		&.is-focused {
			box-shadow: 0 0 0 3px var(--color-border-success);
		}
	}
	&.is-warning {
		border-color: var(--color-border-warning);
		&:focus,
		&.is-focused {
			box-shadow: 0 0 0 3px var(--color-border-warning);
		}
	}
	&.is-error {
		border-color: var(--color-border-danger);
		&:focus,
		&.is-focused {
			box-shadow: 0 0 0 3px var(--color-border-danger);
		}
	}
}

//***************************************************************************************************
// 6. Typography
// **************************************************************************************************

/// @deprecated `m-font-style` mixin will be deprecated before Metal 1.0.0
/// Sets the general font style, weight and line height
///
/// @group Typography
/// @require $m-font-styles
///
/// @param {string} $style - one of $m-font-styles
/// @output default font styles
@mixin m-font-style($style: text) {
	font-weight: normal;
	margin: unset;

	@if $style == code {
		font-family: var(--font-family-code);
	} @else if $style == text {
		font-family: var(--font-family);
		line-height: var(--line-height);
		font-variation-settings: 'wght' 400;
	} @else if $style == strong {
		font-family: var(--font-family);
		font-variation-settings: 'wght' 800;
	} @else if $style == button {
		font-family: var(--font-family);
		line-height: var(--line-height-heading);
		font-variation-settings: 'wght' 520;
	} @else if $style == heading {
		font-family: var(--font-family);
		line-height: var(--line-height-heading);
		font-variation-settings: 'wght' 600;
	} @else {
		@warn "Unknown variant. Variants should be 'text', 'heading', 'strong' or 'code'";
	}

	@warn "`m-font-all-sizes` SASS mixin will be deprecated before Metal 1.0.0";
}

/// Allows text to hypenate. Typically used for content.
///
/// @group Typography
///
/// @output Styles that provide content hyphenation
@mixin m-font-hyphenate() {
	overflow-wrap: break-word;
	hyphens: auto;
}

/// @deprecated `m-font-all-sizes` mixin will be deprecated before Metal 1.0.0
/// All font size classes for in-component use
///
/// @group Typography
/// @require $m-font-sizes
///
/// @output default font styles and `&.is-size-#{size} classes`
@mixin m-font-all-sizes() {
	
	@each $size in $m-font-sizes {
		@if $size == 'default' {
			font-size: var(--font-size-default);
		} @else {
			&.is-size-#{$size} {
				font-size: var(--font-size-#{$size});
				letter-spacing: var(--letter-spacing-#{$size});
			}
		}
	}
	@warn "`m-font-all-sizes` SASS mixin will be deprecated before Metal 1.0.0";
}

/// Styles for a single font size
///
/// @group Typography
///
/// @param {string} $size - Font size on the scale
/// @param {Bool} $trim - Removes the leading trim to make centering/positioning easier
/// @output default font styles and `&.is-size-#{size} classes`
@mixin m-font-size($size, $trim: false) {
	@if type-of($size) == string {
		font-size: var(--font-size-#{$size});
		letter-spacing: var(--letter-spacing-#{$size});
	} @else {
		@warn "Type sizes must be one of 'xxxl', 'xxl', 'xl', 'l', 'm', 's', 'xs'";
	}

	@if $trim == trim {
		leading-trim: both;
		text-edge: cap;
	}
}

/// All text measure classes for in-component use
/// Separate classes are generated for content use or heading use
///
/// @group Typography
/// @require $m-size-measure-headings
///
/// @output  `&.has-measure-#{size} classes` depending on heading or content
@mixin m-font-all-measures($type: 'content') {
	@if $type == 'heading' {
		@each $size in $m-size-measure-headings {
			&.has-measure-#{$size} {
				max-inline-size: var(--size-measure-heading-#{$size});
			}
		}
	} @else {
		@each $size in $m-size-measure-content {
			&.has-measure-#{$size} {
				max-inline-size: var(--size-measure-content-#{$size});
			}
		}
	}
}

/// Creates truncation for text elements
@mixin m-text-ellipsis($width: 100%, $display: inline-block) {
	display: $display;
	max-width: $width;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	word-wrap: normal;
}
