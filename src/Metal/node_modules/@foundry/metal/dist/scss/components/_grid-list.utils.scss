/// WIP: Creates a list of global breakpoints
/// TODO: Port updated tokens to generate this map dynamically
/// @requires grid-list.tokens.json
/// @type Map
// $breakpoints: (
// 	'xs': 576px,
// 	's': 752px,
// ) !default;

/// WIP: Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
// @mixin respond-to($breakpoint) {
// 	$raw-query: map-get($breakpoints, $breakpoint);

// 	@if $raw-query {
// 		$query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

// 		@container m-container (max-width: $query) {
// 			@content;
// 		}
// 	} @else {
// 		@error 'No value found for `#{$breakpoint}`. '
// 		 + 'Please make sure it is defined in `$breakpoints` map.';
// 	}
// }


/// WIP: Generates basic grid rules, not responsive yet
/// @access public
/// @param {Number} $m-grid-list-size-column - column size
/// @param {String} $m-grid-list-item-column-span - t-shirt size amount of columns a grid item spans
/// @param {Boolean} $debug - changes background color of grid
@mixin create-grid-list($m-grid-list-size-column: 112px, $m-grid-list-item-column-span: m, $debug: false) {
	$m-grid-list-item-column-span: var(--m-grid-list-item-column-span-#{$m-grid-list-item-column-span});

	$m-grid-list-item-size: calc(var(--m-grid-list-size-column) * $m-grid-list-item-column-span + ($m-grid-list-item-column-span - 1) * var(--m-grid-list-size-gap));
    @if $debug == true {
		background: rgba(255, 87, 120, 1);

		&::before,
		&::after {
			background-image: repeating-linear-gradient(
				45deg,
				transparent,
				transparent 16px,
				rgba(255, 191, 204, 1) 16px,
				rgba(255, 191, 204, 1) 24px
			);
			display: block;
			width: var(--m-container-padding);
			position: absolute;
		}
		&::before {
			content: '';
			top: 0;
			bottom: 0;
			left: 0;
			border-right: 1px solid rgba(240, 0, 47, 1);
		}
		&::after {
			content: '';
			top: 0;
			bottom: 0;
			right: 0;
			border-left: 1px solid rgba(240, 0, 47, 1);
		}
	}
	
	display: grid;
	padding-inline: 0;
	gap: var(--m-grid-list-size-gap);
	grid-template-columns: repeat(auto-fill, $m-grid-list-item-size);
}