@import './_grid-list.utils';

// Grid & Container – Release Checklist
// View `src/routes/docs/components/grid-list/+page.md` for items to address in scope

// Resources
// https://sass-mq.github.io/sass-mq/
// https://github.com/eduardoboucas/include-media
// https://get.foundation/sites/docs/xy-grid.html – These guys may actually be on to something here. (ex. grid-x grid-margin-x small-up-2 medium-up-4 large-up-6)
// https://www.bourbon.io/docs/latest/
// https://github.com/twbs/rfs – A MUST LOOK utility for responsive sizing
// https://lukyvj.github.io/family.scss/
// https://cirrus-ui.netlify.app/grid/span – This may actually be the better approach, to add span utils. Doesn't 100% solve responsive, but could work.

// TODO: @jgibson – Update SCSS tooling/extensions to handle modern CSS rule linting
// TODO: @jgbson - https: //git.reddfive.com/ux-engineering/metal/-/issues/186
// TODO: @jgibson – Create a container query rule for m-container

.m-grid-list {
    --m-grid-list-size-gap: var(--size-gap-l);
	--m-grid-list-size-column-default: 112px;
    --m-grid-list-size-column-s: var(--m-grid-list-size-column-default);
    --m-grid-list-size-column-m: 132px;
    --m-grid-list-size-column-l: calc(50cqw - var(--m-grid-list-size-gap) / 2);
	--m-grid-list-item-column-span-default: 2;
    --m-grid-list-item-column-span-xs: 1;
    --m-grid-list-item-column-span-s: calc(4 / 3);
    --m-grid-list-item-column-span-m: var(--m-grid-list-item-column-span-default);
    --m-grid-list-item-column-span-l: 4;
}

// TODO: Move this into a MD file that explains our naming conventions `/naming-conventions`
// Nord DS Example: https://nordhealth.design/naming/#html-classes
// .{prefix}-{name}-{modifier} and .is-{status}
// .{m}-{grid-list}-{modular} .is-{size-s}

.m-grid-list {
    --m-grid-list-size-column: var(--m-grid-list-size-column-default);

    @include create-grid-list(var(--grid-size-column), m);
    box-sizing: border-box; // Ensures that our box-model isn't affected by borders and padding

    &.is-size-s {
        @include create-grid-list(var(--m-grid-list-size-column), s);
    }

    &.is-size-m {
        @include create-grid-list(var(--m-grid-list-size-column), m);
    }

    &.is-size-l {
        @include create-grid-list(var(--m-grid-list-size-column), l);
    }
} 

@container m-container (width < 752px) {
    .m-grid-list {
        --m-grid-list-size-column: var(--m-grid-list-size-column-m);
    }
}

@container m-container (width < 576px) {
    .m-grid-list {
        --m-grid-list-size-column: calc(50cqw - var(--m-grid-list-size-gap) / 2);

        &.is-size-s {
            @include create-grid-list(var(--m-grid-list-size-column), xs);
        }

        &.is-size-l {
            @include create-grid-list(var(--m-grid-list-size-column), m);
        }
    }
}

