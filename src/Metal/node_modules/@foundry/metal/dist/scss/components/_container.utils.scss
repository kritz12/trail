/// WIP: Generates styles for standard metal containers
/// TODO: Port mixin to separate file and leverage maps, or leverage SCSS forward/use to make use of them in this file
/// @access public
/// @param {String} $size - Container t-shirt size
/// @param {Bool} $debug - Container t-shirt size
/// @param {Bool} $inset - Adds default padding to left and right of container
/// @param {Bool} $align - Sets the horizontal alignment of the container (default: `center`)
/// @requires $container-sizes
@mixin create-container($size: default, $align: center, $inset: true, $debug: false,) {
	container: m-container / inline-size;
	width: 100%; // Always go full width until we encounter our "contained" limit
	max-inline-size: var(--m-container-size-#{$size});

	@if $inset == true {
		padding-inline: var(--m-container-padding);
	}
	@if $align == center {
		margin-inline: auto; // Vertically align container to center of available canvas by default
	}

	@if $debug == true {
		background: rgba(255, 87, 120, 1);

		&::before,
		&::after {
			background-image: repeating-linear-gradient(
				45deg,
				transparent,
				transparent 16px,
				rgba(255, 191, 204, 1) 16px,
				rgba(255, 191, 204, 1) 24px
			);
			display: block;
			width: var(--m-container-padding);
			position: absolute;
		}
		&::before {
			content: '';
			top: 0;
			bottom: 0;
			left: 0;
			border-right: 1px solid rgba(240, 0, 47, 1);
		}
		&::after {
			content: '';
			top: 0;
			bottom: 0;
			right: 0;
			border-left: 1px solid rgba(240, 0, 47, 1);
		}
	}
}

/// WIP: Create debug styles
/// TODO: Port mixin to separate file and leverage maps, or leverage SCSS forward/use to make use of them in this file
/// @access public
/// @param {String} $size - Container t-shirt size
/// @param {Bool} $debug - Container t-shirt size
/// @param {Bool} $inset - Adds default padding to left and right of container
/// @param {Bool} $align - Sets the horizontal alignment of the container (default: `center`)
/// @requires $container-sizes
@mixin debug() {
	background: rgba(255, 87, 120, 1);

	&::before,
	&::after {
		background-image: repeating-linear-gradient(
			45deg,
			transparent,
			transparent 16px,
			rgba(255, 191, 204, 1) 16px,
			rgba(255, 191, 204, 1) 24px
		);
		display: block;
		width: var(--m-container-padding);
		position: absolute;
	}
	&::before {
		content: '';
		top: 0;
		bottom: 0;
		left: 0;
		border-right: 1px solid rgba(240, 0, 47, 1);
	}
	&::after {
		content: '';
		top: 0;
		bottom: 0;
		right: 0;
		border-left: 1px solid rgba(240, 0, 47, 1);
	}
}
